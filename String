#include <iostream>
#include <string.h>

using namespace std;
class String
{
    char *str;
    int len;
public:
    String(int l = 0); // конструктор по умолчанию
    String(const char *s); // конструктор копирует содержимое переданной строки
    String(const String &); // конструктор копирования: создаёт копию объекта String
    ~String() { //деструктор ++
        if(str) delete []str; str = NULL;
    }
    int strLength(); // длина строки
    String & operator = (const String &);
    char &operator [](int i){ //возвращает i-ый элемент строки ++
        return str[i];
    }
    bool operator == (String &);
    bool operator != (String &);
    String operator + (const String &);
    String & operator += (const String &s2); // к первой строке приписываем вторую и возвращвем первую
    friend istream & operator >> (istream &, String &);
    friend ostream & operator << (ostream &, String &);
    int BMSearch(String &);
};
String::String(int l){ // конструктор по умолчанию ++
    str = new char[l];
    len = 0;
    str[0] = '\0';
}
String::String(const char *s){ // конструктор копирует содержимое переданной строки ++
    str = new char[strlen(s) + 1];
    for(len = 0; s[len] != 0; len++){
        str[len] = s[len];
    }
    str[len] = '\0';
}
String::String(const String &s){
    str = new char[s.len + 1];
    for (len = 0; len <= s.len; str[len] = s.str[len], len++){
        len--;
    }
}
String &String::operator += (const String &s2){
    len += s2.len;
    char *t = new char[len + 1];
    strcpy_s(t, len+1, str);
    strcat_s(t, len + 1, s2.str);
    delete []str;
    str = t;
    return *this;
}
int String::strLength(){
    return len;
}
istream & operator >> (istream &is, String &s){
    char temp[100];
    is >> temp;
    s = String(temp);
    return is;
}
ostream & operator << (ostream &os, String &s){
    os << s.str;
    return os;
}
int main()
{
    String s1("На дворе трава на траве дрова");
    String s2("траве");

}
